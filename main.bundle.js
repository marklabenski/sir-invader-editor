!function(e){function t(n){if(r[n])return r[n].exports;var a=r[n]={exports:{},id:n,loaded:!1};return e[n].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var r={};return t.m=e,t.c=r,t.p="../dist/scripts/",t(0)}([function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var a=r(1),o=n(a),c=81,d=function(){var e={invaders:[],storageVersion:2,render:function(){var e=this;document.querySelector(".list").innerHTML="";var t=document.createElement("ul");this.invaders.map(function(r){var n=document.createElement("li");t.appendChild(n);var a=document.createElement("div");n.appendChild(a),a.innerHTML=o.default.exportSvg(r);var c=document.createTextNode("name: "+r.name+"\nhealth: "+r.health+"\nspeed: "+r.speed+"\narmed: "+r.armed+"\ncost: "+r.cost+"\n");n.appendChild(c),document.querySelector(".list").appendChild(t),localStorage.setItem("invader-list",JSON.stringify(e.invaders)),localStorage.setItem("invader-list-version",e.storageVersion)})},loadFromStorage:function(e){this.invaders=JSON.parse(e),this.render()},add:function(e){this.invaders.push(e),this.render()},remove:function(e){this.invaders.splice(e,1),this.render()}};return e}();null!=localStorage.getItem("invader-list")&&localStorage.getItem("invader-list-version")==d.storageVersion&&d.loadFromStorage(localStorage.getItem("invader-list"));for(var u=0;u<c;u++){var l=document.createElement("div");l.classList.add("pixel");var i=document.createAttribute("data-pixel-index");i.value=""+u;var s=document.createAttribute("style");s.value="background-color:black;",l.setAttributeNode(i),l.setAttributeNode(s),document.querySelector(".pixel-edit").appendChild(l)}var v=document.querySelectorAll(".pixel");[].map.call(v,function(e){e.addEventListener("mousedown",function(t){var r=e.style.backgroundColor;"black"===r?e.style.backgroundColor="white":e.style.backgroundColor="black"})});var p=function(e){return[].map.call(e,function(e){var t=e.style.backgroundColor;return"black"!==t})},m=function(){var e={health:+document.querySelector('input[name="invader.health"]').value,speed:+document.querySelector('input[name="invader.speed"]').value,armed:+document.querySelector('input[name="invader.armed"]').value,name:document.querySelector('input[name="invader.name"]').value};return e.appearance={pixels:p(v)},e};document.querySelector(".save").addEventListener("mousedown",function(e){var t=m(),r=o.default.createInvader(t);document.querySelector('input[name="invader.cost"]').value=r.cost,d.add(r)}),document.querySelector(".export-list").addEventListener("mousedown",function(e){document.querySelector(".panel.export textarea").innerHTML=JSON.stringify(d.invaders)});var f=document.querySelector(".js-textareacopybtn");f.addEventListener("click",function(e){var t=document.querySelector(".panel.export textarea");t.select();try{document.execCommand("copy")}catch(e){console.log("Oops, unable to copy")}})},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=r(2),o=r(3),c=n(o);t.default={createInvader:a.createInvader,emptyAppearance:a.emptyAppearance,calculateInvaderCosts:a.calculateInvaderCosts,exportSvg:c.default},e.exports=t.default},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});for(var r=81,n={pixels:[]},a=0;a<r;a++)n.pixels.push(!1);var o=function(e){return e.health+e.speed+e.armed},c=function(e){var t=Object.assign({health:0,speed:0,armed:0,name:"",appearance:n},e);t.cost=o(t);var r=t;return r};t.createInvader=c,t.emptyAppearance=n,t.calculateInvaderCosts=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){var t=e.appearance.pixels,r=t.reduce(function(e,t,r){var n="rgb(0,0,0)";t===!0&&(n="rgb(255,255,255)");var a=r%9,o=Math.floor(r/9);return e+'<rect x="'+a+'" y="'+o+'" width="1" height="1" style="fill:'+n+'; stroke-width:0" />\n'},'<svg viewBox="0 0 9 9">\n');return r+"</svg>"};t.default=r,e.exports=t.default}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,